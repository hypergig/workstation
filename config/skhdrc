# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# layout modes
:: default : yabai -m config layout bsp
:: float : yabai -m config layout float
:: stack : yabai -m config layout stack

# toggle between default and stack
alt - s ; stack
stack < alt - s ; default

# toggle between default and float
alt - d ; float
float < alt - d ; default

# shortcuts
default, stack, float < alt - return : alacritty msg create-window || open -n /Applications/Alacritty.app
default, stack, float < shift + alt - c : skhd --restart-service; yabai --restart-service;

# move windows to spaces
default, stack, float < shift + alt - 1 : yabai -m window --space 1
default, stack, float < shift + alt - 2 : yabai -m window --space 2
default, stack, float < shift + alt - 3 : yabai -m window --space 3
default, stack, float < shift + alt - 4 : yabai -m window --space 4

# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east

# rotate stack
stack < alt - j : yabai -m window --focus stack.next
stack < alt - k : yabai -m window --focus stack.prev

# move managed window
shift + alt - h : yabai -m window --warp west
shift + alt - j : yabai -m window --warp south
shift + alt - k : yabai -m window --warp north
shift + alt - l : yabai -m window --warp east

# resize windows

# grow
default, float < alt - y : yabai -m window --resize left:-50:0
default, float < alt - u : yabai -m window --resize bottom:0:50
default, float < alt - i : yabai -m window --resize top:0:-50
default, float < alt - o : yabai -m window --resize right:50:0

# shrink
default, float < alt - n : yabai -m window --resize left:50:0
default, float < alt - m : yabai -m window --resize bottom:0:-50
default, float < alt - 0x2B : yabai -m window --resize top:0:50
default, float < alt - 0x2F : yabai -m window --resize right:-50:0

alt - a : [ "$(yabai -m config auto_balance)" == 'on' ] && yabai -m config auto_balance off || { yabai -m config auto_balance on; yabai -m space --balance; }

# split
alt - e : yabai -m window --toggle split
alt - v : yabai -m window --insert south
alt - b : yabai -m window --insert east

# float / unfloat window
default, stack < alt - f : yabai -m window --toggle float
